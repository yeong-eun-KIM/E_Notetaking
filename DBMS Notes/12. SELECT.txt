1. Syntax
    1) SELECT [DISTINCT] {* | <COLUMN_NAME>, .....}
        FROM    테이블이름(들) [AS 테이블이름 별칭]
        [WHERE 검색조건(들)]
        [GROUP BY 속성이름]
        [HAVING 검색조건(들)]
        [ORDER BY 속성이름[ASC|DESC]]

        - ALL : 투플의 중복을 허용하도록 지정
        - DISTINCT : 투플의 중복을 허용하지 않도록 지정
            - 중복을 제거한 유일 집합을 추출
            - 컬럼 2개 조회
                - 2개 컬럼 조합 기준 중복된 행이 제거된 집합이 출력됨
        
        - AS 키워드를 이용해 결과 테이블에서 속성의 이름을 바꾸어 출력 가능
            - AS 키워드 생략가능
            - 앨리어스를 이용해 테이블 및 컬럼(표현식)에 대한 이름(별칭)을 지정할 수 있음
            - 앨리어스명으로 공백이 있을 경우 "'으로 감쌈
            - 앨리어스명으로 한글을 줄 수 있음
            - 앨리어스 사용시 "AS"는 생략가능

        - 산술식을 이용해 검색
            - 산술식 : 속성의 이름과 +, -, *, / 등의 산술 연산자와 상수로 구성
                - 비교 연산자
                    - =
                      <> 다르다
                      <
                      >
                      <=
                      >=
                - 논리 연산자
                    - AND
                      OR
                      NOT
            - WHERE절
                - 조건을 주어 특정 조건에 부합하는 결과집합(행)만을 추출
                    - "> " 연산자
                - BETWEEN 연산자
                    - 값에 범위에 대한 조건에 부합하는 결과 집행(행)
                - NOT BETWEEN 연산자
                - IN 연산자
                    - 특정 목록과 일치하는 값이 있으면 결과집합으로 리턴함
                    - IN 연산자와 OR연산은 결과집합이 동일함
                - NOT IN 연산자
                    - "<>" 연산자 + AND 조건
            
            - ORDER BY절
                - 1개 컬럼 - ASC (오름차순) 정렬
                - 2개 컬럼 - DESC (내림차순) + ASC(오름차순) 정렬
                - 컬럼 앨리언스를 기재하여 정렬
                - SELECT절 컬럼 기재 순서(순번)를 기재하여 정렬
                - NULLS FIRST, NULSS LAST

            - LIMIT 절
                - SELECT문에서 반환되는 결과집합의 행의 건수를 제한함
            - LIMIT ~ OFFSET 사용
                - OFFSET : 출력하는 시작 행
                            0부터 시작함

            - FETCH 절
                - SELECT문에서 반환된는 결과집합의 행의 건수를 제한함

            - LIMIT vs FETCH
                - 기능적으로 동일함
                - LIMIT은 국제 표준은 아님
                - FETCH는 SQL 국제 표준임

            - LIKE 연산자
                - 특정 패턴과 일치하는 조건으로 데이터를 조회함
                - 와일드 카드 %, _과 함께 사용
                - % 
                    - 무엇이 나오든지 나오지 않든지 상관이 없다는 뜻임
                    - 와일드 카드 % 앞/뒤 사용 ('%Jen%')
                        - 값이 어떤걸로 시작해서 어떤걸로 끝나든지간에 'Jen'만 존재하면 리턴함
                -_ (언더바)
                    - 무엇이든지간에 한자리의 문자를 의미함
                    - ___ (3개)
                        - 무엇이든지간에 3자리만 딱 있으면 리턴함
                - _% (언더바퍼센트)
                    - Jen___%
                        - Jen으로 시작하면서 총 6자리 이상인 모든 행을 리턴함

        - null 비교
            - is null 연산자
            - is not null 연산자

        - CASE 문
            - IF문과 같은 분기처리에 의한 SQL문 작성이 가능함
        - CASE 문 (ORDER BY)
        