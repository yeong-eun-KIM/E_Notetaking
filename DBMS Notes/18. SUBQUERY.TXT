1. 서브쿼리
    1) 하나의 SQL문 안에 포함되어 있는 또 다른 SQL문을 말함
        - 하나의 SQL문으로 풀 수 없는 조금 더 복잡한 데이터를 추출할 때 사용
    2) 서브쿼리는 메인 쿼리의 컬럼을 모두 사용 할 수 있지만 메인 쿼리는 서브쿼리의 컬럼을 사용할 수 없음
    3) 서브쿼리를 괄호로 감싸서 사용함
    4) 서브쿼리는 단일 행(single row) 또는 복수 행(multiple row) 비교 연산자와 함꼐 사용가능함
        - 단일 행(single row) 비교 연산자는 반드시 1건 이하여야함
        - 복수 행 비교연산자는 서브쿼리의 결과 건수와 상관 없음
    5) 서브쿼리에서는 order by를 사용하지 못함
        - order by절은 메인 쿼리의 마지막 문장에 위치하여야 함
    6) 서브쿼리가 사용 가능한 위치
        - select절 -from절 - where절 - having절 - order by절
        - insert문의 values절
        - update문의 set절

2. 서브쿼리 구분
    1) 중첩 서브쿼리
        - where절
    2) 인라인 뷰
        - from절
    3) 스칼라 서브쿼리
        - select절

3. 서브쿼리 구분2
    1) 단일행 서브쿼리
        - 하나의 값을 리턴하는 서브쿼리
        - 일반적인 연산자 모두 사용가능
            - 비교연산자 (=, >, <)
            - 논리연산자 (AND, OR, NOT)
    2) 다중행 서브쿼리
        - 리턴값이 여러 개의 레코드
        - 결과를 처리하는 전용 연산자
            - IN, ALL, ANY, EXISTS

4. 연산자
    1) ANY 연산자
        - 서브쿼리에 의해 반환된 값과 비교함
        - 서브쿼리의 값이 어떠한 값이라도 만족을 하면 조건이 성립됨
        - 여러 개의 레코드의 or 효과
        - 가장 작은 값보다 큰
    2) ALL 연산자
        - 서브쿼리에 의해 반환된 값과 비교함
        - 서브쿼리의 모든 값이 만족을 해야만 조건이 성립됨
        - 여러 개의 레코드의 AND 효과
        - 가장 큰 값보다 큰
    3) IN / EXISTS 연산자
        - 서브쿼리 내에 집합이 존재하는지 존재 여부만 판단함
        - 결과값 중에 있는 것 중에서의 의미
        - IN은 전체 레코드를 스캔함; EXISTS는 존재여부만 확인하고 스캔하진 않음(IN 보다 속도빠름)
        - 존재하면 TRUE / 존재하지 않으면 False
        - 연산시 부하가 줄어듦
        