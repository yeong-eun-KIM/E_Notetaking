1. 프로세스 (process)
    1) OS(Operating System)는 동시에 여러 개의 프로그램이 실행됨
    2) process
        - 프로그램이 실행 중인 상태
        - 프로그램이 실행 되면 OS로부터 메모리를 할당 받아 프로세스 상태가 됨

2. 스레드 (Thread)
    1) 하나의 프로세스는 하나 이상의 thread를 가지게 되고,
    2) 실제 작업(task)을 수행하는 단위는 thread임

3. 멀티 스레딩 (Muti-Threading)
    1) 여러 thread가 동시에 수행되는 프로그래밍
    2) 여러 작업(task)이 동시에 실행되는 효과
    3) thread는 각각 자신만의 작업 공간을 가짐 (context)
    4) 각 thread 사이에서 공유하는 자원이 있을 수 있음
        예) static, instance
    5) 여러 thread가 자원을 공유하여 작업이 수행되는 경우 서로 자원을 차지하려는 race condition이 발생 할 수 있음
    6) critical section
        - 여러 thread가 공유하는 자원 중 경쟁이 발생하는 부분
    7) critical section에 대한 동기화(synchronization)를 구현해야 함
        - 구현하지 않으면 오류가 발생 할 수 있음

4. 자바 thread 만들기
    1) Thread 클래스 상속
    2) Runnable 인터페이스 구현
    3) 람다식으로 Runnable 구현
        - run()

5. Thread Status
                     Run 상태
                     thread
                     ^ CPU 배분           sleep(),join(),wait()
    1) start ==>    Runnable 상태       ----------------------->            not Runnable 상태
                 thread thread thread    sleep() -> 시간지나면                  thread
                 thread thread thread    join() -> other thread exits               thread
                 thread thread thread    wait() -> notify(), notifyAll()                       
                                        <-----------------------
                     =====> Dead


6. thread 클래스의 여러 메서드들
    1) Thread 우선 순위
        - MIN_PRIORITY(=1) ~ MAX_PRIORITY(=10)
        - 디폴트 우선 순위 : NORM_PRIORITY(=5)
        - 우선 순위가 높은 Thread가 CPU의 배분을 받을 확률이 높음
        - getPriority() / setPriority(int newPriority)
    2) join()
        - 동시에 두 개 이상의 Thread가 실행 될 때, 다른 thread의 결과를 참조하여 실행해야 하는 경우 사용
        - join()를 호출한 thread가 not-Runnable 상태가 됨
        - 다른 thread의 수행이 끝나면 Runnable 상태로 돌아감
    3) Thread 종료하기
        - 무한 반복의 경우 while(flag)의 flag 변수값을 false 로 바꾸어 종료를 시킴

7. 멀티 thread 프로그래밍에서 동기화
    1) critical section
        - 두 개 이상의 thread가 동시에 접근하는 경우 문제가 생길 수 있음
            => 동시에 접근 할 수 없도록 한 영역

            thread1     get()[critical section]release()
            thread2     get()                           [critical section]release()
            thread3     get()                                                       [critical section]release()
       
        - 한 순간 오직 하나의 thread만이 critical section을 얻을 수 있고, 
        나머지 thread들은 대기(blocking) 상태가 됨
            - 해당 thread만이 critical section에 들어 갈 수 있음
    
    2) 동기화 (synchronization)
        - 두 개 이상의 Thread가 같은 객체에 접근 할 경우 동시에 접근함으로써 오류가 발생
        - 동기화는 임계영역에 접근한 경우 공유자원을 lock하여 다른 thread의 접근을 제어함
        - 동기화를 잘못 구현하면 deadlock 상태가 될 수 있음

        - 자바에서는 synchronized 메서드, synchronized 블럭을 사용
            - synchronized 메서드
                - deadlock을 방지하는 기술이 제공되지 않으므로 synchronized 메서드에서 다른 synchronized 메서드를 호출하지 않도록 함

    3) wait() / notify() 활용한 동기화
        - 리소스가 어떤 조건에서 더 이상 유효하지 않은 경우, 리소스를 기다리기 위해 wait() 메서드를 이용
        - wait() 상태인 thread는 notify() 호출 될 때까지 기다림
        - 유효한 자원이 생기면 notify()가 호출되고 wait()하고 있는 thread 중 무작위로 하나의 thread를 재시작 하도록 함
        - notifyAll()이 호출되면 wait()하고 있는 모든 thread가 재시작 됨
            - 이 경우 유효한 리소스만큼의 thread만 수행됨
            - 자원을 갖지 못한 thread는 다시 wait() 상태가 됨