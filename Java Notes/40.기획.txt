1. PM (Product Manager)
   서비스 기획자
   PO (Product Owner)

2. 직무명 변화 순서
    1) 웹 마스터
    2) 웹 기획자
    3) 서비스 기획자
    4) UX 디자이너
    5) 프로덕트 디자이너
    6) 프로덕트 매니저
    7) 프로덕트 오너

3.  컨셉========================================================================================>운영
    사업/전략 기획

        가설설정    UI/UX 기획     디자인   개발    테스트/릴리즈  
                                                                    마케팅  /   데이터분석

4. 프로덕트 매니저 조건
    1) 이슈(문제)해결
    2) 시각화
    3) 책임감

5. 프로젝트
    1) 내가 주도적으로 기획하고 개발
    2) 성장 할 수 있는 기회임 (성취감)
    3) 커리어를 시작하는 첫 단추를 만들 기회
    4) 기술을 깊이 있게 알 수 있음
    5) 기본적인 프로젝트 관리 기술을 배울 수 있음
    6) 사람들과 협업하는 방법을 터득 할 수 있음

6. 프로젝트 주제 정하기
    1) 망하기
        - 일단 해보자!
            - 계획없이
            - 의욕만 앞서
            - 왜 하는지 모른체
            - 단순히 최신 기술만 써보려고
    
    2) 내가 만들고 싶은 것이 무엇인지 구체적으로 생각해 보는 시간이 반드시 필요함
        - 내가 사용할 것을 만들어야 배움의 깊이가 훨씬 깊음
        - 포트폴리오의 넣을 때 아주 가치있게 생각함
        - 나의 생활에서 바꿀 수 있는 것을 찾아 보는 것도 하나의 방법

7. 프로젝트를 관리하는 목적
    1) 요구 사항을 충족시킬 수 있음.
    2) 프로젝트의 상태를 원할하게 공유함 
    3) 계획, 세부 사항, 피드백, 파일을 한곳에서 관리할수 있음.
    4) 협업 개선 
    5) 나의 역할은 개발자이면서 Project leader임.

8. 실무 
    1) 프로젝트가 연속적으로 발생하는데, 프로젝트의 흐름을 알고,
       관심을 가져야 큰 그림을 볼수 있음.
    2) 지금 프로젝트에서 중요한 것이 무엇인지 알고 관심을 가져야 
       본인의 개발 일정도 잘 관리할 수 있음.    
    3) PM, PO중에는 비개발자 출신이 많음.
        - 우선 순위와 일정을 논의하면서 개발자의 의견을 구하는 경우도 빈번함.
        - 이분에게 대안을 제시하거나 적극적으로 의견을 피력해야 할 경우가 많음.
    4) 점점 시니어가 되어가면서 팀 내에서 해야 할 프로젝트를 리딩하게 됨.
        프로젝트 관리에 주축 멤버가 될것임.                  

9. 개발자로서 잘 해야 할것
    1) 개발 일정 산출과 스케쥴링 
    2) 타 조직 / 직군과의 커뮤니케이션 
    3) 위험 관리 
    4) 문서화 (산출물)

10. 시간에 따른 프로젝트 Steps 
    
    기획        아이디어 수집 및  
                프로젝트 시작     =========>  요구사항 수집 =========>  우선순위 정하기                플랜닝                    
                    ||                          /\
                    ||                          ||    
    디자인          ||   레퍼런스 조사          ||                    UI / UX 디자인 
                      ==>  user flow      ======
 
    개발

11. 소프트웨어 개발 주기 (SDLC,Software Development Life Cycle)
    1) 실무에서 소프트웨어 개발 주기를 기반으로 프로젝트를 진행
    2) 기획 > 분석 > 디자인 > 구현 > 테스팅 및 배포 > 유지 보수 > 계획 > ....

        - 기획
            - 요구사항 수집하고 프로젝트 기획하는 단계
        - 분석
            - 요구사항을 정의하는 단계
            - 요구사항명세서(SRS,Software Requirement Specification)

12. 소프트웨어 개발 방법론
    1) Waterfall
        - 전통적인 개발 모델
        - 프로젝트 기간 동안 SDLC의 주기를 한 사이클만 돔
        - 요즘 이 모델 사용 거의 안함
    
    2) Agile
        - 등장배경
            - 소프트웨어 요구사항은 개발 도중 자주 변경 됨
            - 변경된 요구사항에 따른 작업량을 예측하기 힘듦
            - 전체적인 개발 흐름이 느려짐
            - 제한된 시간과 비용 안에서 정보는 불완전하고 예측은 불가능하다를 전제로 가짐
            - 그 전제 안에서 합리적인 답을 내는 것이 애자일 개발 프로세스
        - 특징
            -  일정한 주기를 가지고 프로토타입을 만들어내며 그때 그때 필요한 요구를 더하고 수정하여 소프트웨어를 개발해 나가는 실용적인 스타일
        - XP (Extreme Programming)
        - Scrum
            - 주기적인 데모 대신 Sprint 목표를 달성하는 것에 초점을 둔 프로세스
            - 2~4주 단위의 스프린트를 운영
            - Grooming 미팅
                - Backlog에 쌓인 task들에 대해 팀원들끼리 논의를 해서 해당 task의 size 예측과 우선순위 정하기
            - Planning 미팅
                - Product Backlog에서 Sprint 기간 동안 할 수 있는 일을 팀원들끼리 결정하고 할당하기
            - Daily Scrum
                - 매일 팀원들끼리 모여 전날 어떤 일을 했는지, 오늘 어떤 일을 할 것인지
                blocker가 있는지에 대해 간단하게 공유. 보통 15분 내외
            - 회고 미팅
                - 스프린트 끝난 후 팀원들끼리 모여 스프린트에서 잘 된 것들, 개선되면 좋을 것들을 논의해서
                다음 스프린트에 반영 할 수 있도록, 협엽을 더 잘하기 위한 시간
                - 보통 1시간 내외
