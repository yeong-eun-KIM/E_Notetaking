1. 관점 지향 프로그래밍 (AOP : Aspect Oriented Programming)
    1) 특정한 함수(핵심기능) 호출 전이나 후에 뭔가 공통적인 처리가 필요하다면 AOP 구현함
        - 로깅, 트랜잭션, 인증
    2)  OOP로 처리하기에는 다소 까다로운 부분을 AOP라는 처리 방식을 도입하여 손쉽게 공통 기능을 추가, 수정, 삭제 할 수 있도록 함

2. 핵심기능과 부가기능
    1) 업무(biz) 로직을 포함하는 기능을 핵심 기능(Core Concerns)
    2) 핵심기능을 도와주는 부가적인 기능 (로깅, 보안 등)을 부가기능(Cross-cutting Concerns)이라고 부름
    3) 객체지향의 기본 원칙을 적용하여도 핵심기능에서 부가기능을 분리해서 모듈화하는 것은 매우 어려움

3. AOP(Aspect Oriented Programming) 개요
    1) 애플리케이션에서 관심사의 분리(기능의 분리) 즉, 핵심적인 기능에서 부가적인 기능을 분리함
    2) 분리한 부가기능을 애스팩트(Aspect)라는 독특한 모듈형태로 만들어서 설계하고 개발하는 방법
    3) AOP는 부가기능을 애스팩트로 정의하여, 핵심기능에서 부가기능을 분리함으로써 객체지향적인 가치를 지킬 수 있도록 도와ㅜ는 개념
    4) 부가 기능(advice)을 동적으로 추가해주는 기술
    5) 메서드의 시작 또는 끝에 자동으로 코드(advice)를 추가해주는 기술

4. AOP 관련 용어
    1) target (타겟)
        - advice가 추가될 객체
        - 핵심기능을 담고 있는 모듈
        - 타겟은 부가기능을 부여할 대상이 됨
    2) advice (advice)
        - target에 동적으로 추가될 부가 기능(코드)
        - 타겟에 제공할 부가기능을 담고 있는 모듈
    3) join point (조인 포인트)
        - advice가 추가(join)될 대상(메서드)
        - 어드바이스가 적용될 수 있는 위치
        - 타겟 객체가 구현한 인터페이스의 모든 메서드는 조인 포인트가 됨
    4) pointcut
        - join point들을 정의한 패턴
        - 어드바이스를 적용할 타겟의 메서드를 선별하는 정규표현식임
        - 포인트컷 표현식은 execution으로 시작하고, 메서드의 SIgnature를 비교하는 방법을 주로 이용함
            - execution(*kr.co.ezenac.*.*(..))
    5) proxy
        - target에 advice가 동적으로 추가되어 생성된 객체
        - spring은 프록시 기반 AOP를 지원함
        - spring은 타겟(target) 객체에 대한 프록시를 만들어 제공함
        - 타겟을 감싸는 프록시는 실행시간(runtime)에 생성됨
        - 프록시는 어드바이스를 타겟 객체에 적용하면서 생성되는 객체임
    6) weaving
        - target에 advice를 추가해서 proxy를 생성하는 것
        - 위빙은 포인트컷에 의해서 결정된 타겟의 조인 포인트에 부가기능(어드바이스)을 삽입하는 과정을 뜻함
        - 위빙은 AOP가 핵심기능(타겟)의 코드에 영향을 주지 않으면서 필요한 부가기능(어드바이스)을 추가할 수 있도록 해주는 핵심적인 처리과정