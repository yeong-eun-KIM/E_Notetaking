1. MyBatis 개요
    1) 자바코드안의 SQL 구문을 별도의 xml로 분리함
        - config.xml
        - Mapper.xml
    2) 자바 코드로부터 SQL문을 분리해서 관리
    3) 매개변수 설정과 쿼리 결과를 읽어오는 코드를 제거
    4) 작성할 코드가 줄어서 생산성 향상, 유지보수 편리
    5) SQL을 별도의 파일로 분리해서 관리
        - 객체-SQL 사이의 파라미터 Mapping 작업을 자동으로 해줌
    6) JPA(Java Persistence Api)나 Hibernate 등 DB프로그래밍과 병행된 개발 기술임
    7) 퍼시턴스 프레임워크
        - JDBC의 모든 기능을 MyBatis가 대부분 제공함
        - 복잡한 JDBC 코드를 걷어내며 슬림한 소스코드 유지 가능
        - SQL에 변경이 있을 때마다 자바 코드를 수정하거나 컴파일 하지 않아도 됨

2. SqlSessionFactoryBean과 SqlSessionTemplate


3. MyBatis 주요 컴포넌트
    1) MyBatis 설정파일 (config.xml)
        -데이터베이스의 접속 주소 정보, Mapper 파일의 경로 등 고정된 환경정보 설정
        - <typeAliases>
            <typeAlias alias="BoardDto" type="kr.co.heart.domain.BoardDto" />
          </typeAliases>
        - DAO문
    2) mapping 파일 (Mapper.xml)
        - SQL문과 OR Mapping을 설정
    3) SqlSessionFactory
        - SqlSession을 생성해서 제공
    4) SqlSession
        - SQL 명령을 수행하는데 필요한 메서드 제공
        - 핵심적인 역할을 하는 클래스
    5) SqlSessionFactoryBean
        - SqlSessionFactory를 spring에서 사용하기 위한 빈(bean)
        - MyBatis 설정파일을 바탕으로 SqlSessionFactory를 생성함
    6) SqlSessionTemplate
        - SQL명령을 수행하는데 필요한 메서드 제공
        - thread-safe( 멀티스레드에 안전)
        - 핵심적인 역할을 하는 클래스
        - SqlSession 인터페이스를 구현
        - Spring Bean으로 등록해야 함

4. sqlSession의 주요 메서드
    1) T selectOne (String statement)
       T selectOne (String statement, Object parameter)
        - 하나의 행을 반환하는 select에 사용
        - parameter로 sql에 bingding될 값 제공
    2) List<E> selectList(String statement)
       List<E> selectList(String statement, Object parameter)
        - 여러 행을 반환하는 select에 사용
    3) Map<K,V> selectMap(String statement, String keyCol)
       Map<K,V> selectMap(String statement, String keyCol, Object parameter)
        - 여러 행을 반환하는 select에 사용
        - keyCol에 Map의 key로 사용할 컬럼 지정
    4) int insert(String statement)
       int insert(String statement, Object parameter)
        - insert문 실행하고 insert된 행의 갯수를 반환
    5) int delete(String statement)
       int delete(String statement, Object parameter)
        - delete문 실행하고 delete된 행의 갯수를 반환    
    6) int update(String statement)
       int update(String statement, Object parameter)
        - update문 실행하고 update된 행의 갯수를 반환    
5. 구현순서
    1) 테이블 생성
    2) Mapper XML & DTO 작성
    3) DAO 인터페이스 구현
    4) Service 인터페이스 구현
    5) Controller 인터페이스 구현