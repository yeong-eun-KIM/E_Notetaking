1. URI 정의
                        URI                         HTTP 메서드
    1) 읽기       /board/read?bno=번호                  GET             지정된 번호의 게시물을 보여줌
    2) 삭제       /board/remove                         POST            게시물 삭제

    3) 쓰기       /board/write                          GET             게시물 작성 화면 보여줌
                  /board/write                          POST            작성한 게시물 저장
    4) 수정       /board/modify?bno=번호                GET             수정할 게시물을 보여줌
                  /board/modify                         POST            수정된 게시물 저장

2. log4j
    1) 개요
        - 로그 기능을 제공하는 오픈 소스 라이브러리
        - 웹 사이트에 접속한 사용자 정보나 각 클래스의 메서드 호출 시각 등 여러 가지 정보를 로그로 출력해서 관리
        - 메이븐에서 프로젝트 생성시 자동으로 log4j 라이브러리가 설치됨
    2) 태그
        - <appender></appender>
            - 로그의 출력 위치를 결정(콘솔, 파일 등)함
            - XXXAppender로 끝나는 클래스들의 이름을 보면 출력 위치를 알 수 있음
                - ConsoleAppender : 콘솔에 로그 메시지 출력
                - FileAppender : 파일에 로그 메시지 출력
                - DailyRollingAppender : 설정한 기간 단위로 새 파일을 만들어 로그 메시지 기록
        - <layout></layout>
            - 어떤 형식으로 출력할지 출력 레이아웃을 결정함
            - PatternLayout 클래스에서 사용되는 출력 속성들
                - %p : debug, info, error, fatal 등 로그 레벨 이름 출력
                - %m : 로그 메시지 출력
                - %d : 로깅 이벤트 발생 시각 출력
                - %F : 로깅이 발생한 프로그램 파일 이름 출력
                - %L : 로깅이 발생한 caller의 라인 수 출력
        - <logger></logger>
            - 로깅 메세지를 appender에 전달함
            - 로그 레벨을 이용해 출력여부를 조정할 수 있음
            - 여러 가지 로그 레벨들
                - FATAL : 시스템 차원에서 심각한 문제가 발생해 애플리케이션 작동 불가능한 경우에 해당하는 레벨임
                - ERROR : 실행 중 문제가 발생한 상태를 나타냄
                - WARN : 향후 시스템 오류의 원인이 될 수 있는 경고 메시지를 나타냄
                - INFO : 로그인, 상태 변경과 같은 운영과 관련된 정보 메시지를 나타냄
                - DEBUG : 개발시 디버깅 용도로 사용한 메시지를 나타냄
                - TRACE : debug 레벨보다 상세한 로깅 정보를 출력하기 위해 도입된 레벨임

3. JSON
    1) JavaScript Object Notation
    2) 자바스크립트 객체 표기법
    3) {속성명 : 속성값, 속성명2 : 속성값2}
    4) [{속성명1: 속성값1 ...}, {속성명2 : 속성값 ...}, ... ]   //객체배열
    5) {키1 : {속성명1 : 속성값1 ...}, 키2 : {속성명1 : 속성값1} }      //Map

4. Stringify()와 parse()
    1) JS 객체를 서버로 전송하려면, 직렬화(문자열로 변환)가 필요함
        - JSON.Stringify()
        - 객체를 JSON 문자열로 변환 (직렬화, JS객체 -> 문자열)
    2) 서버가 보낸 데이터(JSON문자열)을 객체로 변환
        - JSON.parse()
        - JSON 문자열을 객체로 변환(역직렬화, 문자열 -> JS객체)
        - {name: "ezen", age: 30}  -- JSON.Stringify() ->    '{"name":"ezen", "age":30}'
             --JS객체--             <- JSON.parse() --                --string--

5. Jackson Databind
    1) 문자열을 자바객체로 변환해줌
    2) 자바 컨트롤러가 데이터를 받을 수 있음

6. AjaX
    1) Asynchronous javascript
    2) 요즘은 JSON을 주로 사용
    3) 비동기 통신으로 데이터를 주고 받기 위한 기술
    4) 웹페이지 전체(data+UI)가 아닌 일부(data)만 업데이트 가능
